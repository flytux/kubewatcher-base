server:
  port: 8080

spring:
  application:
    name: kube-watcher
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: false
      write-dates-as-timestamps: false
    deserialization:
      fail-on-ignored-properties: false
      fail-on-unknown-properties: false
    property-naming-strategy: LOWER_CAMEL_CASE
    date-format: com.fasterxml.jackson.databind.util.StdDateFormat
  thymeleaf:
    cache: false
  main:
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/kube-watcher?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul
    username: kwuser
    password: kubeworks!@
#    initialization-mode: always # SpringBoot JDBC 이용시 블럭 해제 (schema.sql 적용됨) 하이버네이트 JPA 이용시 블럭, import.sql, ddl-auto: false
#    data: import.sql
    hikari:
      auto-commit: false
#      connection-init-sql: "set session time_zone = 'Asia/Seoul'"
      minimum-idle: 10
      maximum-pool-size: 10
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true

  jpa:
    database: mysql
    generate-ddl: false # db schema 생성 여부
    show-sql: false
    hibernate:
      ddl-auto: create-drop
      # 엔티티 적용 방식 (update : 기존 데이터 유지, create : 신규 생성, create-drop : 신규 생성, validate : 검증),
      # Entity 클래스의 컬럼정보로 테이블 생성
    properties:
      hibernate.format_sql: true
      hibernate.use_sql_comments: true
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  metrics:
    export:
      prometheus:
        enabled: true

application:
  properties:
    root-domain: ''
    auth:
      users:
        - user-name: "test"
          password: "test"
          role: "USER"
    monitoring:
      default-cluster-name: local
      clusters:
        local:
          cluster-name: local
          prometheus:
            url: "http://prometheus.do"
          k8s:
            url: "https://rancher.do/k8s/clusters/local"
            api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"
    dependencies:
      grafana:
        url: "http://162.243.175.190:3000"
        api-token: "eyJrIjoiczY0a1JhbWRsVEpnaDJ3MDRpZms0M1Y3aElSYTdoZHciLCJuIjoib25seSIsImlkIjoxfQ=="
        login-cookie-name: "grafana_session"
    services:
      - code: AGW
        name: api-gateway
        namespace: default
        displayName: API Gateway
      - code: CUS
        name: customers
        namespace: default
        displayName: Customers
      - code: VET
        name: vets
        namespace: default
        displayName: Vets
      - code: VIT
        name: visits
        namespace: default
        displayName: Visits


---
spring:
  profiles: local
  jpa:
    show-sql: true

application:
  properties:
    monitoring:
      default-cluster-name: local
      clusters:
        local:
          cluster-name: local
          prometheus:
            url: "http://prometheus.do"
          k8s:
            url: "https://rancher.do/k8s/clusters/local"
            api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"
        test:
          cluster-name: local
          prometheus:
            url: "http://prometheus.do"
          k8s:
            url: "https://rancher.do/k8s/clusters/local"
            api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"
    dependencies:
      grafana:
        url: "http://162.243.175.190:3000"
        api-token: "eyJrIjoiczY0a1JhbWRsVEpnaDJ3MDRpZms0M1Y3aElSYTdoZHciLCJuIjoib25seSIsImlkIjoxfQ=="
        login-cookie-name: "grafana_session"

logging:
  level:
    com.squareup.okhttp3: debug

---
spring:
  profiles: embedded
  jpa:
    generate-ddl: false
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:kube-watcher;MODE=MySQL
    username: kwuser
    password:
    hikari:
      connection-init-sql: ""
      auto-commit: true
      minimum-idle: 10
      maximum-pool-size: 10
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

---
spring:
  profiles: test-cluster
application:
  properties:
    monitoring:
      default-cluster-name: local
      clusters:
        local:
          cluster-name: local
          prometheus:
            url: "http://prometheus.do"
          k8s:
            url: "https://rancher.do/k8s/clusters/local"
            api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"
    services:
      - code: BAC
        name: dev-core-bac
        namespace: dev-core-ns
        displayName: 입금
      - code: BNC
        name: dev-core-bnc
        namespace: dev-core-ns
        displayName: 방카BNC
      - code: CHE
        name: dev-core-che
        namespace: dev-core-ns
        displayName: 건강검진
      - code: CLM
        name: dev-core-clm
        namespace: dev-core-ns
        displayName: 클레임처리
      - code: COM
        name: dev-core-com
        namespace: dev-core-ns
        displayName: 공통업무
      - code: COP
        name: dev-core-cop
        namespace: dev-core-ns
        displayName: 클레임지급
      - code: CTC
        name: dev-core-ctc
        namespace: dev-core-ns
        displayName: 계약변경
      - code: FHB
        name: dev-core-fhb
        namespace: dev-core-ns
        displayName: 재무HUB
      - code: IBC
        name: dev-core-ibc
        namespace: dev-core-ns
        displayName: 산출공통
      - code: IFR
        name: dev-core-ifr
        namespace: dev-core-ns
        displayName: 보험사기관리
      - code: IPM
        name: dev-core-ipm
        namespace: dev-core-ns
        displayName: 통합입출금
      - code: MGM
        name: dev-core-mgm
        namespace: dev-core-ns
        displayName: 사차관리
      - code: MRM
        name: dev-core-mrm
        namespace: dev-core-ns
        displayName: 병력관리
      - code: NCT
        name: dev-core-nct
        namespace: dev-core-ns
        displayName: 신계약청약
      - code: QOT
        name: dev-core-qot
        namespace: dev-core-ns
        displayName: 가입설계
      - code: SVP
        name: dev-core-svp
        namespace: dev-core-ns
        displayName: 생존지급
      - code: UDW
        name: dev-core-udw
        namespace: dev-core-ns
        displayName: 언더라이딩
      - code: VRI
        name: dev-core-vri
        namespace: dev-core-ns
        displayName: 변액
      - code: CEB
        name: dev-cust-ceb
        namespace: dev-cust-ns
        displayName: 고객이벤트버스
      - code: ICM
        name: dev-cust-icm
        namespace: dev-cust-ns
        displayName: 통합고객관리
      - code: ICS
        name: dev-cust-ics
        namespace: dev-cust-ns
        displayName: 통합고객지원(신원확인)
      - code: HCG
        name: dev-pica-hcg
        namespace: dev-pica-ns
        displayName: 솔루션설정
      - code: HDM
        name: dev-pica-hdm
        namespace: dev-pica-ns
        displayName: 모니터링
      - code: HGW
        name: dev-pica-hgw
        namespace: dev-pica-ns
        displayName: 인증/권한/워크플로우
      - code: HMS
        name: dev-pica-hms
        namespace: dev-pica-ns
        displayName: 메타관리
      - code: HPA
        name: dev-pica-hpa
        namespace: dev-pica-ns
        displayName: HPAS관리페이지
      - code: HPF
        name: dev-pica-hpf
        namespace: dev-pica-ns
        displayName: 상품팩토리
      - code: HPS
        name: dev-pica-hps
        namespace: dev-pica-ns
        displayName: 계약구조정보
      - code: HQI
        name: dev-pica-hqi
        namespace: dev-pica-ns
        displayName: HPAS가입설계(데모)
      - code: HRS
        name: dev-pica-hrs
        namespace: dev-pica-ns
        displayName: Rule Engine
      - code: HST
        name: dev-pica-hst
        namespace: dev-pica-ns
        displayName: 이관
      - code: PT
        name: dev-core-pt
        namespace: dev-core-ns
        displayName: Unknown

---
spring:
  profiles: dev-cluster

application:
  properties:
    monitoring:
      default-cluster-name: local
      clusters:
        local:
          cluster-name: local
          prometheus:
            url: "http://prometheus.do"
          k8s:
            url: "https://rancher.do/k8s/clusters/local"
            api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"
    services:
      - code: BAC
        name: dev-core-bac
        namespace: dev-core-ns
        displayName: 입금
      - code: BNC
        name: dev-core-bnc
        namespace: dev-core-ns
        displayName: 방카BNC
      - code: CHE
        name: dev-core-che
        namespace: dev-core-ns
        displayName: 건강검진
      - code: CLM
        name: dev-core-clm
        namespace: dev-core-ns
        displayName: 클레임처리
      - code: COM
        name: dev-core-com
        namespace: dev-core-ns
        displayName: 공통업무
      - code: COP
        name: dev-core-cop
        namespace: dev-core-ns
        displayName: 클레임지급
      - code: CTC
        name: dev-core-ctc
        namespace: dev-core-ns
        displayName: 계약변경
      - code: FHB
        name: dev-core-fhb
        namespace: dev-core-ns
        displayName: 재무HUB
      - code: IBC
        name: dev-core-ibc
        namespace: dev-core-ns
        displayName: 산출공통
      - code: IFR
        name: dev-core-ifr
        namespace: dev-core-ns
        displayName: 보험사기관리
      - code: IPM
        name: dev-core-ipm
        namespace: dev-core-ns
        displayName: 통합입출금
      - code: MGM
        name: dev-core-mgm
        namespace: dev-core-ns
        displayName: 사차관리
      - code: MRM
        name: dev-core-mrm
        namespace: dev-core-ns
        displayName: 병력관리
      - code: NCT
        name: dev-core-nct
        namespace: dev-core-ns
        displayName: 신계약청약
      - code: QOT
        name: dev-core-qot
        namespace: dev-core-ns
        displayName: 가입설계
      - code: SVP
        name: dev-core-svp
        namespace: dev-core-ns
        displayName: 생존지급
      - code: UDW
        name: dev-core-udw
        namespace: dev-core-ns
        displayName: 언더라이딩
      - code: VRI
        name: dev-core-vri
        namespace: dev-core-ns
        displayName: 변액
      - code: CEB
        name: dev-cust-ceb
        namespace: dev-cust-ns
        displayName: 고객이벤트버스
      - code: ICM
        name: dev-cust-icm
        namespace: dev-cust-ns
        displayName: 통합고객관리
      - code: ICS
        name: dev-cust-ics
        namespace: dev-cust-ns
        displayName: 통합고객지원(신원확인)
      - code: HCG
        name: dev-pica-hcg
        namespace: dev-pica-ns
        displayName: 솔루션설정
      - code: HDM
        name: dev-pica-hdm
        namespace: dev-pica-ns
        displayName: 모니터링
      - code: HGW
        name: dev-pica-hgw
        namespace: dev-pica-ns
        displayName: 인증/권한/워크플로우
      - code: HMS
        name: dev-pica-hms
        namespace: dev-pica-ns
        displayName: 메타관리
      - code: HPA
        name: dev-pica-hpa
        namespace: dev-pica-ns
        displayName: HPAS관리페이지
      - code: HPF
        name: dev-pica-hpf
        namespace: dev-pica-ns
        displayName: 상품팩토리
      - code: HPS
        name: dev-pica-hps
        namespace: dev-pica-ns
        displayName: 계약구조정보
      - code: HQI
        name: dev-pica-hqi
        namespace: dev-pica-ns
        displayName: HPAS가입설계(데모)
      - code: HRS
        name: dev-pica-hrs
        namespace: dev-pica-ns
        displayName: Rule Engine
      - code: HST
        name: dev-pica-hst
        namespace: dev-pica-ns
        displayName: 이관