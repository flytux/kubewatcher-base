server:
  port: 8080

spring:
  application:
    name: kube-watcher
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: false
      write-dates-as-timestamps: false
    deserialization:
      fail-on-ignored-properties: false
      fail-on-unknown-properties: false
    property-naming-strategy: LOWER_CAMEL_CASE
    date-format: com.fasterxml.jackson.databind.util.StdDateFormat
  thymeleaf:
    cache: false
  main:
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/kube-watcher?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul
    username: kwuser
    password: kubeworks!@
#    initialization-mode: always # SpringBoot JDBC 이용시 블럭 해제 (schema.sql 적용됨) 하이버네이트 JPA 이용시 블럭, import.sql, ddl-auto: false
#    data: import.sql
    hikari:
      auto-commit: false
#      connection-init-sql: "set session time_zone = 'Asia/Seoul'"
      minimum-idle: 10
      maximum-pool-size: 10
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true

  jpa:
    database: mysql
    generate-ddl: false # db schema 생성 여부
    show-sql: false
    hibernate:
      ddl-auto: create-drop
      # 엔티티 적용 방식 (update : 기존 데이터 유지, create : 신규 생성, create-drop : 신규 생성, validate : 검증),
      # Entity 클래스의 컬럼정보로 테이블 생성
    properties:
      hibernate.format_sql: true
      hibernate.use_sql_comments: true
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  metrics:
    export:
      prometheus:
        enabled: true

application:
  properties:
    root-domain: ''
    auth:
      users:
        - user-name: "test"
          password: "test"
          role: "USER"
    dependencies:
      grafana:
        url: "http://162.243.175.190:3000"
        api-token: "eyJrIjoiczY0a1JhbWRsVEpnaDJ3MDRpZms0M1Y3aElSYTdoZHciLCJuIjoib25seSIsImlkIjoxfQ=="
        login-cookie-name: "grafana_session"
      prometheus:
        url: "http://162.243.175.190:9090"
      k8s:
        name: local
        url: "https://rancher.do/k8s/clusters/local"
        api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"
    services:
      - code: AGW
        name: api-gateway
        namespace: default
        displayName: API Gateway
      - code: CUS
        name: customers
        namespace: default
        displayName: Customers
      - code: VET
        name: vets
        namespace: default
        displayName: Vets
      - code: VIT
        name: visits
        namespace: default
        displayName: Visits


---
spring:
  profiles: local
  jpa:
    show-sql: true

application:
  properties:
    dependencies:
      grafana:
        url: "http://162.243.175.190:3000"
        api-token: "eyJrIjoiczY0a1JhbWRsVEpnaDJ3MDRpZms0M1Y3aElSYTdoZHciLCJuIjoib25seSIsImlkIjoxfQ=="
        login-cookie-name: "grafana_session"
      prometheus:
        url: "http://162.243.175.190:9090"
      k8s:
        name: local
        url: "https://rancher.do/k8s/clusters/local"
        api-token: "kubeconfig-user-mbjf7:k6rzln6t7qdg8frm7plcpxqsgg55zwnc7vjd9f8f52mljpmwrtqfph"

logging:
  level:
    com.squareup.okhttp3: debug

---
spring:
  profiles: embedded
  jpa:
    generate-ddl: false
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:kube-watcher;MODE=MySQL
    username: kwuser
    password:
    hikari:
      connection-init-sql: ""
      auto-commit: true
      minimum-idle: 10
      maximum-pool-size: 10
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true